# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        version: [3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ matrix.version }}
          
          # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

          # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
            echo Add other actions to build,
            echo test, and deploy your project.
            echo 1. Python Version
            python --version

  # label of the container job
  postgres-job:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        version: [3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}

    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: postgres_db
          # required
          POSTGRES_PASSWORD: postgres
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgres_user
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3.1.2
        with:
          python-version: 3.6
      - name: Install Dependencies
        run: |
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
          echo installed dependencies
        
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
          echo postgree installed 

      # queries database with postgres client
      - name: Query database
        run: |
          echo creating database
          psql -h localhost -U postgres_db -c "CREATE DATABASE pmr"
          echo database created
      
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          POSTGRES_HOST: localhost
      # The default PostgreSQL port
          POSTGRES_PORT: 5432

      

          
          
          
          
          
          
          
          
